buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.spongepowered.mixin'

group = 'leobeliik'
version = '1.0'

java {
    archivesBaseName = 'mycustomtweaks'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.20.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mycustomtweaks'
            property 'mixin.env.remapRefMap', 'true'

            mods {
                mycustomtweaks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mycustomtweaks'

            mods {
                mycustomtweaks {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mycustomtweaks'

            mods {
                mycustomtweaks {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mycustomtweaks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mycustomtweaks {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mycustomtweaks.refmap.json"

    config "mycustomtweaks.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.blamejared.com' } //violent moon mods
    maven { url = "https://maven.theillusivec4.top/" } //Curios
    maven { url "https://dvs1.progwml6.com/files/maven/" } //JEI
    maven { url "https://cursemaven.com" } //CurseForge
    maven { url = 'https://maven.tterrag.com/' } //create


    maven { url 'https://jitpack.io' }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://ldtteam.jfrog.io/ldtteam/modding/' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.3'

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:0.2.0-beta.8"))
    implementation("com.github.llamalad7.mixinextras:mixinextras-forge:0.2.0-beta.8")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-1.20.1:4.7.4.112")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:5.3.1+1.20.1")
    implementation fg.deobf("vazkii.patchouli:Patchouli:1.20.1-80-FORGE")
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.20.1:4.2.2")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "My Custom Tweaks",
                "Specification-Vendor"    : "mycustomtweaks",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "mycustomtweaks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
